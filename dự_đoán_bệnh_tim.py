# -*- coding: utf-8 -*-
"""Dự đoán bệnh tim.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pThZdCBnPHi3Q0_0p0bixHgBQpac8kOT

Nhập thư viện
"""

# Nhập thư viện
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB, GaussianNB,BernoulliNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.metrics import accuracy_score

"""Load data"""

data = pd.read_csv('/content/drive/MyDrive/Học kì 10/Chuyên đề 3/data/heart.csv')
data.shape

data.head()

data.info()

data.isnull().sum()

data.describe()

"""Phân tích khám phá dữ liệu"""

data['target'].value_counts()

plt.title('Phân  phối bệnh tim')
data['target'].value_counts().plot(kind='pie',autopct='%.1f%%',
                                   figsize=(8,8),shadow=True)

"""Tổng số bệnh nhân bệnh tim cao hơn không mắc bệnh tim . Bộ dữ liệu hơi mất cân bằng"""

plt.title('Age Vs Heart Disease')
sns.boxplot(x='target',y='age',data=data,palette='rainbow')

"""Có một ngoại lệ ở phần dưới của ô thuộc nhóm tuổi không mắc bệnh tim

Độ tuổi trung bình của những người không mắc bệnh tim cao hơn những người mắc bệnh tim
"""

data.groupby(['sex'])['target'].value_counts()

sns.countplot(x=data['sex'],hue=data['target'])

"""Từ biểu đồ trên, chúng ta có thể thấy rằng nam giới có nguy cơ mắc bệnh tim cao hơn nữ giới"""

plt.title("Chest Pain Type (Loại đau ngực)")
data['cp'].value_counts().plot(kind="pie", autopct='%.1f%%',
                               figsize=(8,8),shadow=True)

"""Đau ngực loại 0 (đau thắt ngực điển hình) có số lượng cao nhất và đau ngực loại 3 (không có triệu chứng) có số lượng thấp nhất so với các loại đau ngực khác"""

sns.boxplot(x='target', y='trestbps', data=data,palette='rainbow')

"""Từ biểu đồ hình hộp ở trên, chúng ta có thể thấy rằng có các ngoại lệ ở phần trên của biểu đồ hộp ở cả hai loại. Giá trị trung bình của cả hai loại huyết áp lúc nghỉ gần như bằng nhau"""

sns.boxplot(x='target', y='chol', data=data,palette='rainbow')

"""Giá trị trung bình của cholestrole đối với những người không mắc bệnh tim cao hơn một chút so với giá trị trung bình của cholestrole đối với những người mắc bệnh tim. Có một số ngoại lệ ở phần trên của cả hai ô."""

sns.scatterplot(data=data, x="age", y="chol", hue="target")

"""Số người có Cholesterol cao nằm trong độ tuổi từ 45 đến 70."""

data.groupby(['fbs'])['target'].value_counts()

sns.countplot(x=data['fbs'],hue=data['target'])
plt.show()

"""Người không có đường huyết lúc đói có nguy cơ mắc bệnh tim cao"""

sns.boxplot(x='target', y='thalach', data=data,palette='rainbow')

"""Những người có nhịp tim tối đa có nguy cơ mắc bệnh tim cao. Một số Ngoại lệ được phát hiện ở phần dưới của cả hai biểu đồ hình hộp."""

sns.scatterplot(data=data, x="age", y="thalach", hue="target")

"""Những người đã phát hiện nhịp tim tối đa có nguy cơ mắc bệnh tim cao. Những người đã phát hiện nhịp tim tối đa giảm ở độ tuổi từ 40 đến 60."""

data.groupby(['exang'])['target'].value_counts()

sns.countplot(x=data['exang'],hue=data['target'])
plt.show()

"""Những người không bị đau thắt ngực do tập thể dục có tỷ lệ mắc bệnh tim rất cao."""

sns.boxplot(x='target', y='oldpeak', data=data,palette='rainbow')

"""Những người có 'ST trầm cảm thấp do tập thể dục so với nghỉ ngơi' có nguy cơ mắc bệnh tim cao. Một số ngoại lệ được nhìn thấy ở phần trên của cả hai loại."""

data.groupby(['slope'])['target'].value_counts()

sns.countplot(x=data['slope'],hue=data['target'])
plt.show()

"""Những người có trái tim không khỏe mạnh (slope = 2) có nguy cơ mắc bệnh tim cao."""

data.groupby(['ca'])['target'].value_counts()

sns.countplot(x=data['ca'],hue=data['target'])
plt.show()

"""Những người có giá trị ca = 4 (số lượng mạch chính được nhuộm màu bằng phương pháp soi bột) có nguy cơ mắc bệnh tim cao"""

data.groupby(['thal'])['target'].value_counts()

sns.countplot(x=data['thal'],hue=data['target'])
plt.show()

"""Những người có giá trị thal '2' có nguy cơ mắc bệnh tim cao"""



"""Tương quan"""

#Bản đồ tương quan/sơ đồ nhiệt của các biến số để hiển thị mức độ/giá trị tương quan của từng biến với các biến khác.
plt.figure(figsize = (15,15))
sns.heatmap(data.corr(), vmin = -1, vmax = +1, annot = True, cmap = 'coolwarm')

"""Chuẩn bị dữ liệu"""

X = data.drop(['target'],axis='columns')
X.head(10)

y = data.target
y.head(3)

len(y)

len(X)

#Tạo các biến mẫu Đào tạo và Kiểm tra
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=10)

X_test

"""Xây dựng mô hình"""

y_test

# Khởi tạo một đối tượng mô hình Multinomial Naive Bayes
model_multinomial = MultinomialNB()
# Đào tạo mô hình trên tập huấn luyện
model_multinomial.fit(X_train, y_train)
# Tính toán độ chính xác trên tập kiểm tra
nb=model_multinomial.score(X_test, y_test)
print("Accuracy:", nb)

# Tính độ nhạy, độ đặc hiệu và F1-score cho Multinomial Naive Bayes
y_pred_multinomial = model_multinomial.predict(X_test)
# Tính độ đặc hiệu
precision_multinomial = precision_score(y_test, y_pred_multinomial)
# Tính độ nhạy
recall_multinomial = recall_score(y_test, y_pred_multinomial)
# Đo tổng hợp kết hợp giữa độ đặc hiệu và độ nhạy
f1_multinomial = f1_score(y_test, y_pred_multinomial)

# Khởi tạo một đối tượng mô hình Gaussian Naive Bayes
model_gaussian = GaussianNB()
# Đào tạo mô hình trên tập huấn luyện
model_gaussian.fit(X_train, y_train)
# Tính toán độ chính xác trên tập kiểm tra
nb1=model_gaussian.score(X_test, y_test)
print("Accuracy:", nb1)

# Tính độ nhạy, độ đặc hiệu và F1-score cho Gaussian Naive Bayes
y_pred_gaussian = model_gaussian.predict(X_test)
# Tính độ đặc hiệu
precision_gaussian = precision_score(y_test, y_pred_gaussian)
# Tính độ nhạy
recall_gaussian = recall_score(y_test, y_pred_gaussian)
# Đo tổng hợp kết hợp giữa độ đặc hiệu và độ nhạy
f1_gaussian = f1_score(y_test, y_pred_gaussian)

# Khởi tạo một đối tượng mô hình Bernoulli Naive Bayes
model_bernoulli = BernoulliNB()
# Đào tạo mô hình trên tập huấn luyện
model_bernoulli.fit(X_train, y_train)
# Tính toán độ chính xác trên tập kiểm tra
nb2 = model_bernoulli.score(X_test, y_test)
print("Accuracy:", nb2)

# Tính độ nhạy, độ đặc hiệu và F1-score cho Bernoulli Naive Bayes
y_pred_bernoulli = model_bernoulli.predict(X_test)
# Tính độ đặc hiệu
precision_bernoulli = precision_score(y_test, y_pred_bernoulli)
# Tính độ nhạy
recall_bernoulli = recall_score(y_test, y_pred_bernoulli)
# Đo tổng hợp kết hợp giữa độ đặc hiệu và độ nhạy
f1_bernoulli = f1_score(y_test, y_pred_bernoulli)

"""So sánh mô hình"""

accuracy = [nb,nb1,nb2]
precision = [precision_multinomial,precision_gaussian,precision_bernoulli]
recall   = [recall_multinomial,recall_gaussian,recall_bernoulli]
f1_score = [f1_multinomial,f1_gaussian,f1_bernoulli]
all_models = ['Multinomial Naive Bayes','Gaussian Naive Bayes','Bernoulli Naive Bayes']

score_df = pd.DataFrame({'Algorithms': all_models,
                         'Accuracy_Score': accuracy,
                         'Precision':precision,
                         'Recall':recall,
                         'F1-Score':f1_score})
score_df.style.background_gradient(cmap="YlGnBu",high=1,axis=0)

"""Đánh giá dự đoán"""

# Dữ liệu Bệnh nhân_1 để dự đoán liệu anh ta có mắc bệnh tim hay không.
model_gaussian.predict([[56,1,1,120,236,0,1,178,0,0.8,2,0,2]])

"""Từ dự đoán sử dụng mô hình tốt nhất có thể thấy rằng bệnh nhân mắc bệnh tim"""

# Dữ liệu Bệnh nhân_ để dự đoán liệu anh ta có mắc bệnh tim hay không.
model_gaussian.predict([[57,1,0,130,131,0,1,115,1,1.2,1,1,3]])

"""Từ dự đoán sử dụng mô hình tốt nhất có thể thấy rằng bệnh nhân không được phát hiện bệnh tim."""